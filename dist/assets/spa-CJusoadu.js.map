{"version":3,"file":"spa-CJusoadu.js","sources":["../../src/utils/spa.ts"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE in the repository root for full details.\r\n*/\r\n\r\nimport { type ICreateClientOpts, MatrixError } from \"matrix-js-sdk\";\r\nimport { logger } from \"matrix-js-sdk/lib/logger\";\r\n\r\nimport { Config } from \"../config/Config\";\r\nimport { fallbackICEServerAllowed, initClient } from \"./matrix\";\r\nimport type { InitResult, Session } from \"../ClientContext\";\r\n\r\nexport async function initSPA(\r\n  loadSession: () => Session | undefined,\r\n  clearSession: () => void,\r\n): Promise<InitResult | null> {\r\n  // We're running as a standalone application\r\n  try {\r\n    const session = loadSession();\r\n    if (!session) {\r\n      logger.log(\"No session stored; continuing without a client\");\r\n      return null;\r\n    }\r\n\r\n    logger.log(\"Using a standalone client\");\r\n\r\n    /* eslint-disable camelcase */\r\n    const { user_id, device_id, access_token, passwordlessUser } = session;\r\n    const initClientParams: ICreateClientOpts = {\r\n      baseUrl: Config.defaultHomeserverUrl()!,\r\n      accessToken: access_token,\r\n      userId: user_id,\r\n      deviceId: device_id,\r\n      fallbackICEServerAllowed,\r\n      livekitServiceURL: Config.get().livekit?.livekit_service_url,\r\n    };\r\n\r\n    try {\r\n      const client = await initClient(initClientParams, true);\r\n      return {\r\n        widgetApi: null,\r\n        client,\r\n        passwordlessUser,\r\n      };\r\n    } catch (err) {\r\n      if (err instanceof MatrixError && err.errcode === \"M_UNKNOWN_TOKEN\") {\r\n        // We can't use this session anymore, so let's log it out\r\n        logger.log(\r\n          \"The session from local store is invalid; continuing without a client\",\r\n        );\r\n        clearSession();\r\n        // returning null = \"no client` pls register\" (undefined = \"loading\" which is the current value when reaching this line)\r\n        return null;\r\n      }\r\n      throw err;\r\n    }\r\n  } catch (err) {\r\n    clearSession();\r\n    throw err;\r\n  }\r\n}\r\n"],"names":["initSPA","loadSession","clearSession","session","logger","user_id","device_id","access_token","passwordlessUser","initClientParams","Config","fallbackICEServerAllowed","_a","initClient","err","MatrixError"],"mappings":"oEAcsB,eAAAA,EACpBC,EACAC,EAC4B,OAExB,GAAA,CACF,MAAMC,EAAUF,EAAY,EAC5B,GAAI,CAACE,EACH,OAAAC,EAAO,IAAI,gDAAgD,EACpD,KAGTA,EAAO,IAAI,2BAA2B,EAGtC,KAAM,CAAE,QAAAC,EAAS,UAAAC,EAAW,aAAAC,EAAc,iBAAAC,CAAqB,EAAAL,EACzDM,EAAsC,CAC1C,QAASC,EAAO,qBAAqB,EACrC,YAAaH,EACb,OAAQF,EACR,SAAUC,EACV,yBAAAK,EACA,mBAAmBC,EAAAF,EAAO,IAAI,EAAE,UAAb,YAAAE,EAAsB,mBAC3C,EAEI,GAAA,CAEK,MAAA,CACL,UAAW,KACX,OAHa,MAAMC,EAAWJ,EAAkB,EAAI,EAIpD,iBAAAD,CACF,QACOM,EAAK,CACZ,GAAIA,aAAeC,GAAeD,EAAI,UAAY,kBAEzC,OAAAV,EAAA,IACL,sEACF,EACaF,EAAA,EAEN,KAEH,MAAAY,CAAA,QAEDA,EAAK,CACC,MAAAZ,EAAA,EACPY,CAAA,CAEV"}